# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\github_project\DeltaForceMarketBot\GUI\AppGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSignal, Qt, QThread
from backend.BuyBot import BuyBot
import keyboard

is_running = False

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(478, 163)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_ideal_price = QtWidgets.QLabel(self.centralwidget)
        self.label_ideal_price.setGeometry(QtCore.QRect(20, 20, 71, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_ideal_price.setFont(font)
        self.label_ideal_price.setObjectName("label_ideal_price")
        self.textEdit_ideal_price = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_ideal_price.setGeometry(QtCore.QRect(90, 20, 121, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.textEdit_ideal_price.setFont(font)
        self.textEdit_ideal_price.setObjectName("textEdit_ideal_price")
        self.label_lowest_price = QtWidgets.QLabel(self.centralwidget)
        self.label_lowest_price.setGeometry(QtCore.QRect(280, 110, 71, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_lowest_price.setFont(font)
        self.label_lowest_price.setObjectName("label_lowest_price")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 110, 221, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_unacceptable_price = QtWidgets.QLabel(self.centralwidget)
        self.label_unacceptable_price.setGeometry(QtCore.QRect(20, 70, 71, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_unacceptable_price.setFont(font)
        self.label_unacceptable_price.setObjectName("label_unacceptable_price")
        self.textEdit_unacceptable_price = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_unacceptable_price.setGeometry(QtCore.QRect(90, 70, 121, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.textEdit_unacceptable_price.setFont(font)
        self.textEdit_unacceptable_price.setObjectName("textEdit_unacceptable_price")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(260, 20, 201, 81))
        self.graphicsView.setObjectName("graphicsView")
        self.label_lowest_price_value = QtWidgets.QLabel(self.centralwidget)
        self.label_lowest_price_value.setGeometry(QtCore.QRect(350, 110, 91, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_lowest_price_value.setFont(font)
        self.label_lowest_price_value.setText("")
        self.label_lowest_price_value.setObjectName("label_lowest_price_value")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DFMarketBot"))
        self.label_ideal_price.setText(_translate("MainWindow", "理想价格"))
        self.label_lowest_price.setText(_translate("MainWindow", "当前底价"))
        self.label.setText(_translate("MainWindow", "按 F8 开始循环   按 F9 停止循环"))
        self.label_unacceptable_price.setText(_translate("MainWindow", "最高价格"))

class KeyMonitor(QObject):
    key_pressed = pyqtSignal(int)

    def __init__(self):
        super().__init__()
        keyboard.on_press(self.handle_key)

    def handle_key(self, event):
        if event.name == 'f8':
            self.key_pressed.emit(0)
            print('开始循环')
        elif event.name == 'f9':
            self.key_pressed.emit(1)
            print('停止循环')

class Worker(QThread):
    update_signal = pyqtSignal(int)
    param_update = pyqtSignal(int)  # 新增参数更新信号

    def __init__(self, buybot):
        super().__init__()
        self.buybot = buybot
        self._is_running = False
        self.lock = QtCore.QMutex()
        self.ideal_price = 0
        self.unacceptable_price = 0
        self.param_lock = QtCore.QMutex()  # 参数专用锁

    def run(self):
        while True:
            # 获取运行状态
            self.lock.lock()
            running = self._is_running
            self.lock.unlock()

            if running:
                try:
                    # 获取当前参数值
                    self.param_lock.lock()
                    current_ideal = self.ideal_price
                    current_unacceptable = self.unacceptable_price
                    self.param_lock.unlock()
                    # print(f"当前使用参数：ideal={current_ideal} unacceptable={current_unacceptable}")  # 调试输出
                    
                    # 检测逻辑
                    lowest_price = self.buybot.detect_price()
                    self.update_signal.emit(lowest_price)

                    if lowest_price <= current_ideal:
                        print('当前价格：', lowest_price, '低于理想价格', current_ideal, '，开始购买')
                        self.buybot.buy()
                    else:
                        print('当前价格：', lowest_price, '高于理想价格', current_ideal, '，刷新价格')
                        self.buybot.refresh()

                except Exception as e:
                    print(f"操作失败: {str(e)}")
                self.msleep(100)
            else:
                self.msleep(100)

    def update_params(self, ideal, unacceptable):
        """线程安全更新参数"""
        self.param_lock.lock()
        self.ideal_price = ideal
        self.unacceptable_price = unacceptable
        # print(f"Worker内部参数更新：ideal={self.ideal_price} unacceptable={self.unacceptable_price}")  # 调试输出
        self.param_lock.unlock()

    def set_running(self, state):
        """线程安全更新运行状态"""
        self.lock.lock()
        self._is_running = state
        self.lock.unlock()

def runApp():
    app = QtWidgets.QApplication([])
    window = QtWidgets.QMainWindow()
    mainWindow = Ui_MainWindow()
    mainWindow.setupUi(window)
    
    # 初始化图形视图
    scene = QtWidgets.QGraphicsScene()
    mainWindow.graphicsView.setScene(scene)
    mainWindow.graphicsView.setViewportUpdateMode(QtWidgets.QGraphicsView.FullViewportUpdate)

    # 初始化理想价格和最高价格
    mainWindow.textEdit_ideal_price.setText('0')
    mainWindow.textEdit_unacceptable_price.setText('0')

    # 创建监控线程
    key_monitor = KeyMonitor()
    worker = Worker(BuyBot())
    
    # 信号连接
    key_monitor.key_pressed.connect(lambda x: worker.set_running(x == 0))
    
    def handle_text_change():
        try:
            ideal = int(mainWindow.textEdit_ideal_price.toPlainText())
            unaccept = int(mainWindow.textEdit_unacceptable_price.toPlainText())
            worker.update_params(ideal, unaccept)  # 确保传递两个参数
            mainWindow.label_lowest_price_value.setStyleSheet("color: black;")
            # print(f"参数已更新：理想价{ideal} 最高价{unaccept}")  # 调试输出
        except ValueError:
            mainWindow.label_lowest_price_value.setStyleSheet("color: red;")

    # 确保两个输入框都连接
    mainWindow.textEdit_ideal_price.textChanged.connect(handle_text_change)
    mainWindow.textEdit_unacceptable_price.textChanged.connect(handle_text_change)

    window.show()
    worker.start()
    app.exec_()